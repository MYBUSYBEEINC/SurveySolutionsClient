// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace SurveySolutionsClient.GraphQl
{
    #region base classes
    public struct FieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is String || value is Guid)
                return "\"" + value + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match [_A-Za-z][_0-9A-Za-z]*", name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    
        public GraphQlQueryParameter(string name, T value, bool isNullable = true) : base(name, GetGraphQlTypeName(value, isNullable), value)
        {
        }
    
        private static string GetGraphQlTypeName(T value, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(typeof(T));
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            valueType = Nullable.GetUnderlyingType(valueType) ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            if (valueType == typeof(string))
                return "String";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<FieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<FieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<QueryError> Errors { get; set; }
    }
    
    public class QueryError
    {
        public string Message { get; set; }
        public ICollection<ErrorLocation> Locations { get; set; }
    }
    
    public class ErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string DateTime = "DateTime";
        public const string Decimal = "Decimal";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Long = "Long";
        public const string String = "String";
        public const string Uuid = "Uuid";

        public const string ApplyPolicy = "ApplyPolicy";
        public const string EntityType = "EntityType";
        public const string InterviewActionFlags = "InterviewActionFlags";
        public const string InterviewStatus = "InterviewStatus";
        public const string QuestionScope = "QuestionScope";
        public const string QuestionType = "QuestionType";
        public const string SortEnumType = "SortEnumType";
        public const string UserRoles = "UserRoles";

        public const string Assignment = "Assignment";
        public const string CalendarEvent = "CalendarEvent";
        public const string CategoricalOption = "CategoricalOption";
        public const string Entity = "Entity";
        public const string HeadquartersMutation = "HeadquartersMutation";
        public const string HeadquartersQuery = "HeadquartersQuery";
        public const string IdentifyingEntity = "IdentifyingEntity";
        public const string Interview = "Interview";
        public const string IPagedConnectionOfAssignment = "IPagedConnectionOfAssignment";
        public const string IPagedConnectionOfInterview = "IPagedConnectionOfInterview";
        public const string IPagedConnectionOfMap = "IPagedConnectionOfMap";
        public const string IPagedConnectionOfQuestionnaire = "IPagedConnectionOfQuestionnaire";
        public const string Map = "Map";
        public const string Questionnaire = "Questionnaire";
        public const string QuestionnaireItem = "QuestionnaireItem";
        public const string Translation = "Translation";
        public const string User = "User";
        public const string UserMap = "UserMap";

        public const string AssignmentsFilter = "AssignmentsFilter";
        public const string BooleanOperationFilterInput = "BooleanOperationFilterInput";
        public const string ComparableDateTimeOperationFilterInput = "ComparableDateTimeOperationFilterInput";
        public const string ComparableGuidOperationFilterInput = "ComparableGuidOperationFilterInput";
        public const string ComparableInt32OperationFilterInput = "ComparableInt32OperationFilterInput";
        public const string ComparableInt64OperationFilterInput = "ComparableInt64OperationFilterInput";
        public const string ComparableNullableOfDateTimeOperationFilterInput = "ComparableNullableOfDateTimeOperationFilterInput";
        public const string ComparableNullableOfDecimalOperationFilterInput = "ComparableNullableOfDecimalOperationFilterInput";
        public const string ComparableNullableOfInt32OperationFilterInput = "ComparableNullableOfInt32OperationFilterInput";
        public const string IdentifyEntityValueFilter = "IdentifyEntityValueFilter";
        public const string InterviewsFilter = "InterviewsFilter";
        public const string InterviewSort = "InterviewSort";
        public const string InterviewStatusOperationFilterInput = "InterviewStatusOperationFilterInput";
        public const string ListFilterInputTypeOfIdentifyEntityValueFilterInput = "ListFilterInputTypeOfIdentifyEntityValueFilterInput";
        public const string ListFilterInputTypeOfUserMapFilterInput = "ListFilterInputTypeOfUserMapFilterInput";
        public const string MapsFilter = "MapsFilter";
        public const string MapsSort = "MapsSort";
        public const string NullableOfQuestionScopeOperationFilterInput = "NullableOfQuestionScopeOperationFilterInput";
        public const string QuestionFilter = "QuestionFilter";
        public const string QuestionnaireIdentity = "QuestionnaireIdentity";
        public const string QuestionnaireItemsFilter = "QuestionnaireItemsFilter";
        public const string StringOperationFilterInput = "StringOperationFilterInput";
        public const string StringOperationFilterInputType = "StringOperationFilterInputType";
        public const string UserMapFilterInput = "UserMapFilterInput";
        public const string UserRolesOperationFilterInput = "UserRolesOperationFilterInput";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(bool), "Boolean" },
                { typeof(DateTime), "DateTime" },
                { typeof(string), "String" },
                { typeof(int), "Int" },
                { typeof(Guid), "Uuid" },
                { typeof(long), "Long" },
                { typeof(double), "Float" },
                { typeof(AssignmentsFilter), "AssignmentsFilter" },
                { typeof(BooleanOperationFilterInput), "BooleanOperationFilterInput" },
                { typeof(ComparableDateTimeOperationFilterInput), "ComparableDateTimeOperationFilterInput" },
                { typeof(ComparableGuidOperationFilterInput), "ComparableGuidOperationFilterInput" },
                { typeof(ComparableInt32OperationFilterInput), "ComparableInt32OperationFilterInput" },
                { typeof(ComparableInt64OperationFilterInput), "ComparableInt64OperationFilterInput" },
                { typeof(ComparableNullableOfDateTimeOperationFilterInput), "ComparableNullableOfDateTimeOperationFilterInput" },
                { typeof(ComparableNullableOfDecimalOperationFilterInput), "ComparableNullableOfDecimalOperationFilterInput" },
                { typeof(ComparableNullableOfInt32OperationFilterInput), "ComparableNullableOfInt32OperationFilterInput" },
                { typeof(IdentifyEntityValueFilter), "IdentifyEntityValueFilter" },
                { typeof(InterviewsFilter), "InterviewsFilter" },
                { typeof(InterviewSort), "InterviewSort" },
                { typeof(InterviewStatusOperationFilterInput), "InterviewStatusOperationFilterInput" },
                { typeof(ListFilterInputTypeOfIdentifyEntityValueFilterInput), "ListFilterInputTypeOfIdentifyEntityValueFilterInput" },
                { typeof(ListFilterInputTypeOfUserMapFilterInput), "ListFilterInputTypeOfUserMapFilterInput" },
                { typeof(MapsFilter), "MapsFilter" },
                { typeof(MapsSort), "MapsSort" },
                { typeof(NullableOfQuestionScopeOperationFilterInput), "NullableOfQuestionScopeOperationFilterInput" },
                { typeof(QuestionFilter), "QuestionFilter" },
                { typeof(QuestionnaireIdentity), "QuestionnaireIdentity" },
                { typeof(QuestionnaireItemsFilter), "QuestionnaireItemsFilter" },
                { typeof(StringOperationFilterInput), "StringOperationFilterInput" },
                { typeof(StringOperationFilterInputType), "StringOperationFilterInputType" },
                { typeof(UserMapFilterInput), "UserMapFilterInput" },
                { typeof(UserRolesOperationFilterInput), "UserRolesOperationFilterInput" }
            };
}
    #endregion

    #region enums
    public enum ApplyPolicy
    {
        [EnumMember(Value = "BEFORE_RESOLVER")] BeforeResolver,
        [EnumMember(Value = "AFTER_RESOLVER")] AfterResolver
    }

    public enum SortEnumType
    {
        [EnumMember(Value = "ASC")] Asc,
        [EnumMember(Value = "DESC")] Desc
    }

    public enum QuestionScope
    {
        [EnumMember(Value = "INTERVIEWER")] Interviewer,
        [EnumMember(Value = "SUPERVISOR")] Supervisor,
        [EnumMember(Value = "HEADQUARTER")] Headquarter,
        [EnumMember(Value = "HIDDEN")] Hidden
    }

    public enum QuestionType
    {
        [EnumMember(Value = "SINGLEOPTION")] Singleoption,
        [EnumMember(Value = "MULTYOPTION")] Multyoption,
        [EnumMember(Value = "NUMERIC")] Numeric,
        [EnumMember(Value = "DATETIME")] Datetime,
        [EnumMember(Value = "GPSCOORDINATES")] Gpscoordinates,
        [EnumMember(Value = "TEXT")] Text,
        [EnumMember(Value = "TEXTLIST")] Textlist,
        [EnumMember(Value = "QRBARCODE")] Qrbarcode,
        [EnumMember(Value = "MULTIMEDIA")] Multimedia,
        [EnumMember(Value = "AREA")] Area,
        [EnumMember(Value = "AUDIO")] Audio
    }

    public enum EntityType
    {
        [EnumMember(Value = "SECTION")] Section,
        [EnumMember(Value = "QUESTION")] Question,
        [EnumMember(Value = "STATICTEXT")] Statictext,
        [EnumMember(Value = "VARIABLE")] Variable,
        [EnumMember(Value = "ROSTER")] Roster
    }

    public enum UserRoles
    {
        [EnumMember(Value = "ADMINISTRATOR")] Administrator,
        [EnumMember(Value = "SUPERVISOR")] Supervisor,
        [EnumMember(Value = "INTERVIEWER")] Interviewer,
        [EnumMember(Value = "HEADQUARTER")] Headquarter,
        [EnumMember(Value = "OBSERVER")] Observer,
        [EnumMember(Value = "APIUSER")] Apiuser
    }

    public enum InterviewActionFlags
    {
        [EnumMember(Value = "CANBEREASSIGNED")] Canbereassigned,
        [EnumMember(Value = "CANBEDELETED")] Canbedeleted,
        [EnumMember(Value = "CANBEAPPROVED")] Canbeapproved,
        [EnumMember(Value = "CANBEUNAPPROVEDBYHQ")] Canbeunapprovedbyhq,
        [EnumMember(Value = "CANBEREJECTED")] Canberejected,
        [EnumMember(Value = "CANBERESTARTED")] Canberestarted,
        [EnumMember(Value = "CANBEOPENED")] Canbeopened
    }

    public enum InterviewStatus
    {
        [EnumMember(Value = "RESTORED")] Restored,
        [EnumMember(Value = "CREATED")] Created,
        [EnumMember(Value = "SUPERVISORASSIGNED")] Supervisorassigned,
        [EnumMember(Value = "INTERVIEWERASSIGNED")] Interviewerassigned,
        [EnumMember(Value = "REJECTEDBYSUPERVISOR")] Rejectedbysupervisor,
        [EnumMember(Value = "READYFORINTERVIEW")] Readyforinterview,
        [EnumMember(Value = "SENTTOCAPI")] Senttocapi,
        [EnumMember(Value = "RESTARTED")] Restarted,
        [EnumMember(Value = "COMPLETED")] Completed,
        [EnumMember(Value = "APPROVEDBYSUPERVISOR")] Approvedbysupervisor,
        [EnumMember(Value = "REJECTEDBYHEADQUARTERS")] Rejectedbyheadquarters,
        [EnumMember(Value = "APPROVEDBYHEADQUARTERS")] Approvedbyheadquarters,
        [EnumMember(Value = "DELETED")] Deleted
    }
    #endregion

    #nullable enable
    #region directives
    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class StreamDirective : GraphQlDirective
    {
        public StreamDirective(QueryBuilderParameter<int> initialCount, QueryBuilderParameter<bool> @if, QueryBuilderParameter<string?>? label = null) : base("stream")
        {
            AddArgument("initialCount", initialCount);
            AddArgument("if", @if);
            AddArgument("label", label);
        }
    }

    public class AuthorizeDirective : GraphQlDirective
    {
        public AuthorizeDirective(QueryBuilderParameter<ApplyPolicy> apply, QueryBuilderParameter<string?>? policy = null, QueryBuilderParameter<IEnumerable<string>>? roles = null) : base("authorize")
        {
            AddArgument("apply", apply);
            AddArgument("policy", policy);
            AddArgument("roles", roles);
        }
    }
    #endregion

    #region builder classes
    public partial class HeadquartersQueryQueryBuilder : GraphQlQueryBuilder<HeadquartersQueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "assignments", IsComplex = true, QueryBuilderType = typeof(IPagedConnectionOfAssignmentQueryBuilder) },
            new FieldMetadata { Name = "interviews", IsComplex = true, QueryBuilderType = typeof(IPagedConnectionOfInterviewQueryBuilder) },
            new FieldMetadata { Name = "maps", IsComplex = true, QueryBuilderType = typeof(IPagedConnectionOfMapQueryBuilder) },
            new FieldMetadata { Name = "questionnaires", IsComplex = true, QueryBuilderType = typeof(IPagedConnectionOfQuestionnaireQueryBuilder) },
            new FieldMetadata { Name = "questions", IsComplex = true, QueryBuilderType = typeof(EntityQueryBuilder) },
            new FieldMetadata { Name = "questionnaireItems", IsComplex = true, QueryBuilderType = typeof(QuestionnaireItemQueryBuilder) },
            new FieldMetadata { Name = "viewer", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
        };

        protected override string TypeName { get; } = "HeadquartersQuery";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public HeadquartersQueryQueryBuilder(string? operationName = null) : base("query", operationName)
        {
        }

        public HeadquartersQueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public HeadquartersQueryQueryBuilder WithAssignments(IPagedConnectionOfAssignmentQueryBuilder iPagedConnectionOfAssignmentQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<int?>? skip = null, QueryBuilderParameter<int?>? take = null, QueryBuilderParameter<AssignmentsFilter?>? where = null, string? alias = null, SkipDirective? skipDirective = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            return WithObjectField("assignments", alias, iPagedConnectionOfAssignmentQueryBuilder, new GraphQlDirective?[] { skipDirective, include, stream }, args);
        }

        public HeadquartersQueryQueryBuilder ExceptAssignments() => ExceptField("assignments");

        public HeadquartersQueryQueryBuilder WithInterviews(IPagedConnectionOfInterviewQueryBuilder iPagedConnectionOfInterviewQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<int?>? skip = null, QueryBuilderParameter<int?>? take = null, QueryBuilderParameter<InterviewsFilter?>? where = null, QueryBuilderParameter<IEnumerable<InterviewSort>>? order = null, string? alias = null, SkipDirective? skipDirective = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (order != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "order", ArgumentValue = order} );

            return WithObjectField("interviews", alias, iPagedConnectionOfInterviewQueryBuilder, new GraphQlDirective?[] { skipDirective, include, stream }, args);
        }

        public HeadquartersQueryQueryBuilder ExceptInterviews() => ExceptField("interviews");

        public HeadquartersQueryQueryBuilder WithMaps(IPagedConnectionOfMapQueryBuilder iPagedConnectionOfMapQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<int?>? skip = null, QueryBuilderParameter<int?>? take = null, QueryBuilderParameter<MapsFilter?>? where = null, QueryBuilderParameter<IEnumerable<MapsSort>>? order = null, string? alias = null, SkipDirective? skipDirective = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            if (order != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "order", ArgumentValue = order} );

            return WithObjectField("maps", alias, iPagedConnectionOfMapQueryBuilder, new GraphQlDirective?[] { skipDirective, include, stream }, args);
        }

        public HeadquartersQueryQueryBuilder ExceptMaps() => ExceptField("maps");

        public HeadquartersQueryQueryBuilder WithQuestionnaires(IPagedConnectionOfQuestionnaireQueryBuilder iPagedConnectionOfQuestionnaireQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<int?>? skip = null, QueryBuilderParameter<int?>? take = null, QueryBuilderParameter<Guid?>? id = null, QueryBuilderParameter<long?>? version = null, string? alias = null, SkipDirective? skipDirective = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id, FormatMask = "N"} );

            if (version != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "version", ArgumentValue = version} );

            return WithObjectField("questionnaires", alias, iPagedConnectionOfQuestionnaireQueryBuilder, new GraphQlDirective?[] { skipDirective, include, stream }, args);
        }

        public HeadquartersQueryQueryBuilder ExceptQuestionnaires() => ExceptField("questionnaires");

        public HeadquartersQueryQueryBuilder WithQuestions(EntityQueryBuilder entityQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<Guid> id, QueryBuilderParameter<long> version, QueryBuilderParameter<string?>? language = null, QueryBuilderParameter<QuestionFilter?>? where = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id, FormatMask = "N"} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "version", ArgumentValue = version} );
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            return WithObjectField("questions", alias, entityQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersQueryQueryBuilder ExceptQuestions() => ExceptField("questions");

        public HeadquartersQueryQueryBuilder WithQuestionnaireItems(QuestionnaireItemQueryBuilder questionnaireItemQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<Guid> id, QueryBuilderParameter<long> version, QueryBuilderParameter<string?>? language = null, QueryBuilderParameter<QuestionnaireItemsFilter?>? where = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id, FormatMask = "N"} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "version", ArgumentValue = version} );
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            if (where != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "where", ArgumentValue = where} );

            return WithObjectField("questionnaireItems", alias, questionnaireItemQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersQueryQueryBuilder ExceptQuestionnaireItems() => ExceptField("questionnaireItems");

        public HeadquartersQueryQueryBuilder WithViewer(UserQueryBuilder userQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("viewer", alias, userQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public HeadquartersQueryQueryBuilder ExceptViewer() => ExceptField("viewer");
    }

    public partial class HeadquartersMutationQueryBuilder : GraphQlQueryBuilder<HeadquartersMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "addOrUpdateCalendarEvent", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
            new FieldMetadata { Name = "deleteCalendarEvent", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
            new FieldMetadata { Name = "deleteMap", IsComplex = true, QueryBuilderType = typeof(MapQueryBuilder) },
            new FieldMetadata { Name = "deleteUserFromMap", IsComplex = true, QueryBuilderType = typeof(MapQueryBuilder) },
            new FieldMetadata { Name = "addUserToMap", IsComplex = true, QueryBuilderType = typeof(MapQueryBuilder) }
        };

        protected override string TypeName { get; } = "HeadquartersMutation";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public HeadquartersMutationQueryBuilder(string? operationName = null) : base("mutation", operationName)
        {
        }

        public HeadquartersMutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public HeadquartersMutationQueryBuilder WithAddOrUpdateCalendarEvent(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<int?>? assignmentId = null, QueryBuilderParameter<string?>? comment = null, QueryBuilderParameter<Guid?>? interviewId = null, QueryBuilderParameter<string?>? interviewKey = null, QueryBuilderParameter<DateTime?>? newStart = null, QueryBuilderParameter<Guid?>? publicKey = null, QueryBuilderParameter<string?>? startTimezone = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            if (assignmentId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "assignmentId", ArgumentValue = assignmentId} );

            if (comment != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "comment", ArgumentValue = comment} );

            if (interviewId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "interviewId", ArgumentValue = interviewId, FormatMask = "N"} );

            if (interviewKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "interviewKey", ArgumentValue = interviewKey} );

            if (newStart != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "newStart", ArgumentValue = newStart} );

            if (publicKey != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "publicKey", ArgumentValue = publicKey, FormatMask = "N"} );

            if (startTimezone != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startTimezone", ArgumentValue = startTimezone} );

            return WithObjectField("addOrUpdateCalendarEvent", alias, calendarEventQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersMutationQueryBuilder ExceptAddOrUpdateCalendarEvent() => ExceptField("addOrUpdateCalendarEvent");

        public HeadquartersMutationQueryBuilder WithDeleteCalendarEvent(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<Guid> publicKey, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "publicKey", ArgumentValue = publicKey, FormatMask = "N"} );
            return WithObjectField("deleteCalendarEvent", alias, calendarEventQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersMutationQueryBuilder ExceptDeleteCalendarEvent() => ExceptField("deleteCalendarEvent");

        public HeadquartersMutationQueryBuilder WithDeleteMap(MapQueryBuilder mapQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<string> fileName, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "fileName", ArgumentValue = fileName} );
            return WithObjectField("deleteMap", alias, mapQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersMutationQueryBuilder ExceptDeleteMap() => ExceptField("deleteMap");

        public HeadquartersMutationQueryBuilder WithDeleteUserFromMap(MapQueryBuilder mapQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<string> fileName, QueryBuilderParameter<string> userName, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "fileName", ArgumentValue = fileName} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userName", ArgumentValue = userName} );
            return WithObjectField("deleteUserFromMap", alias, mapQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersMutationQueryBuilder ExceptDeleteUserFromMap() => ExceptField("deleteUserFromMap");

        public HeadquartersMutationQueryBuilder WithAddUserToMap(MapQueryBuilder mapQueryBuilder, QueryBuilderParameter<string> workspace, QueryBuilderParameter<string> fileName, QueryBuilderParameter<string> userName, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "workspace", ArgumentValue = workspace} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "fileName", ArgumentValue = fileName} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userName", ArgumentValue = userName} );
            return WithObjectField("addUserToMap", alias, mapQueryBuilder, new GraphQlDirective?[] { skip, include, stream }, args);
        }

        public HeadquartersMutationQueryBuilder ExceptAddUserToMap() => ExceptField("addUserToMap");
    }

    public partial class IPagedConnectionOfAssignmentQueryBuilder : GraphQlQueryBuilder<IPagedConnectionOfAssignmentQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AssignmentQueryBuilder) },
            new FieldMetadata { Name = "totalCount" },
            new FieldMetadata { Name = "filteredCount" }
        };

        protected override string TypeName { get; } = "IPagedConnectionOfAssignment";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IPagedConnectionOfAssignmentQueryBuilder WithNodes(AssignmentQueryBuilder assignmentQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("nodes", alias, assignmentQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfAssignmentQueryBuilder ExceptNodes() => ExceptField("nodes");

        public IPagedConnectionOfAssignmentQueryBuilder WithTotalCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("totalCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfAssignmentQueryBuilder ExceptTotalCount() => ExceptField("totalCount");

        public IPagedConnectionOfAssignmentQueryBuilder WithFilteredCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("filteredCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfAssignmentQueryBuilder ExceptFilteredCount() => ExceptField("filteredCount");
    }

    public partial class IPagedConnectionOfInterviewQueryBuilder : GraphQlQueryBuilder<IPagedConnectionOfInterviewQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(InterviewQueryBuilder) },
            new FieldMetadata { Name = "totalCount" },
            new FieldMetadata { Name = "filteredCount" }
        };

        protected override string TypeName { get; } = "IPagedConnectionOfInterview";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IPagedConnectionOfInterviewQueryBuilder WithNodes(InterviewQueryBuilder interviewQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("nodes", alias, interviewQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfInterviewQueryBuilder ExceptNodes() => ExceptField("nodes");

        public IPagedConnectionOfInterviewQueryBuilder WithTotalCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("totalCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfInterviewQueryBuilder ExceptTotalCount() => ExceptField("totalCount");

        public IPagedConnectionOfInterviewQueryBuilder WithFilteredCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("filteredCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfInterviewQueryBuilder ExceptFilteredCount() => ExceptField("filteredCount");
    }

    public partial class IPagedConnectionOfMapQueryBuilder : GraphQlQueryBuilder<IPagedConnectionOfMapQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MapQueryBuilder) },
            new FieldMetadata { Name = "totalCount" },
            new FieldMetadata { Name = "filteredCount" }
        };

        protected override string TypeName { get; } = "IPagedConnectionOfMap";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IPagedConnectionOfMapQueryBuilder WithNodes(MapQueryBuilder mapQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("nodes", alias, mapQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfMapQueryBuilder ExceptNodes() => ExceptField("nodes");

        public IPagedConnectionOfMapQueryBuilder WithTotalCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("totalCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfMapQueryBuilder ExceptTotalCount() => ExceptField("totalCount");

        public IPagedConnectionOfMapQueryBuilder WithFilteredCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("filteredCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfMapQueryBuilder ExceptFilteredCount() => ExceptField("filteredCount");
    }

    public partial class IPagedConnectionOfQuestionnaireQueryBuilder : GraphQlQueryBuilder<IPagedConnectionOfQuestionnaireQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(QuestionnaireQueryBuilder) },
            new FieldMetadata { Name = "totalCount" },
            new FieldMetadata { Name = "filteredCount" }
        };

        protected override string TypeName { get; } = "IPagedConnectionOfQuestionnaire";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IPagedConnectionOfQuestionnaireQueryBuilder WithNodes(QuestionnaireQueryBuilder questionnaireQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("nodes", alias, questionnaireQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfQuestionnaireQueryBuilder ExceptNodes() => ExceptField("nodes");

        public IPagedConnectionOfQuestionnaireQueryBuilder WithTotalCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("totalCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfQuestionnaireQueryBuilder ExceptTotalCount() => ExceptField("totalCount");

        public IPagedConnectionOfQuestionnaireQueryBuilder WithFilteredCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("filteredCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public IPagedConnectionOfQuestionnaireQueryBuilder ExceptFilteredCount() => ExceptField("filteredCount");
    }

    public partial class EntityQueryBuilder : GraphQlQueryBuilder<EntityQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "identifying" },
            new FieldMetadata { Name = "label" },
            new FieldMetadata { Name = "options", IsComplex = true, QueryBuilderType = typeof(CategoricalOptionQueryBuilder) },
            new FieldMetadata { Name = "questionText" },
            new FieldMetadata { Name = "scope" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "variable" }
        };

        protected override string TypeName { get; } = "Entity";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EntityQueryBuilder WithIdentifying(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("identifying", alias, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptIdentifying() => ExceptField("identifying");

        public EntityQueryBuilder WithLabel(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("label", alias, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptLabel() => ExceptField("label");

        public EntityQueryBuilder WithOptions(CategoricalOptionQueryBuilder categoricalOptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("options", alias, categoricalOptionQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptOptions() => ExceptField("options");

        public EntityQueryBuilder WithQuestionText(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("questionText", alias, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptQuestionText() => ExceptField("questionText");

        public EntityQueryBuilder WithScope(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("scope", alias, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptScope() => ExceptField("scope");

        public EntityQueryBuilder WithType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("type", alias, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptType() => ExceptField("type");

        public EntityQueryBuilder WithVariable(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("variable", alias, new GraphQlDirective?[] { skip, include, stream });

        public EntityQueryBuilder ExceptVariable() => ExceptField("variable");
    }

    public partial class QuestionnaireItemQueryBuilder : GraphQlQueryBuilder<QuestionnaireItemQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "entityType" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "variable" },
            new FieldMetadata { Name = "scope" },
            new FieldMetadata { Name = "label" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "identifying" },
            new FieldMetadata { Name = "options", IsComplex = true, QueryBuilderType = typeof(CategoricalOptionQueryBuilder) }
        };

        protected override string TypeName { get; } = "QuestionnaireItem";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public QuestionnaireItemQueryBuilder WithEntityType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("entityType", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptEntityType() => ExceptField("entityType");

        public QuestionnaireItemQueryBuilder WithTitle(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("title", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptTitle() => ExceptField("title");

        public QuestionnaireItemQueryBuilder WithVariable(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("variable", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptVariable() => ExceptField("variable");

        public QuestionnaireItemQueryBuilder WithScope(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("scope", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptScope() => ExceptField("scope");

        public QuestionnaireItemQueryBuilder WithLabel(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("label", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptLabel() => ExceptField("label");

        public QuestionnaireItemQueryBuilder WithType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("type", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptType() => ExceptField("type");

        public QuestionnaireItemQueryBuilder WithIdentifying(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("identifying", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptIdentifying() => ExceptField("identifying");

        public QuestionnaireItemQueryBuilder WithOptions(CategoricalOptionQueryBuilder categoricalOptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("options", alias, categoricalOptionQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireItemQueryBuilder ExceptOptions() => ExceptField("options");
    }

    public partial class UserQueryBuilder : GraphQlQueryBuilder<UserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "roles", IsComplex = true },
            new FieldMetadata { Name = "userName" },
            new FieldMetadata { Name = "workspaces", IsComplex = true }
        };

        protected override string TypeName { get; } = "User";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public UserQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include, stream });

        public UserQueryBuilder ExceptId() => ExceptField("id");

        public UserQueryBuilder WithRoles(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("roles", alias, new GraphQlDirective?[] { skip, include, stream });

        public UserQueryBuilder ExceptRoles() => ExceptField("roles");

        public UserQueryBuilder WithUserName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("userName", alias, new GraphQlDirective?[] { skip, include, stream });

        public UserQueryBuilder ExceptUserName() => ExceptField("userName");

        public UserQueryBuilder WithWorkspaces(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("workspaces", alias, new GraphQlDirective?[] { skip, include, stream });

        public UserQueryBuilder ExceptWorkspaces() => ExceptField("workspaces");
    }

    public partial class CalendarEventQueryBuilder : GraphQlQueryBuilder<CalendarEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "assignmentId" },
            new FieldMetadata { Name = "comment" },
            new FieldMetadata { Name = "creatorUserId" },
            new FieldMetadata { Name = "interviewId" },
            new FieldMetadata { Name = "interviewKey" },
            new FieldMetadata { Name = "isCompleted" },
            new FieldMetadata { Name = "publicKey" },
            new FieldMetadata { Name = "startTimezone" },
            new FieldMetadata { Name = "startUtc" },
            new FieldMetadata { Name = "updateDateUtc" }
        };

        protected override string TypeName { get; } = "CalendarEvent";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public CalendarEventQueryBuilder WithAssignmentId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("assignmentId", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptAssignmentId() => ExceptField("assignmentId");

        public CalendarEventQueryBuilder WithComment(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("comment", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptComment() => ExceptField("comment");

        public CalendarEventQueryBuilder WithCreatorUserId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("creatorUserId", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptCreatorUserId() => ExceptField("creatorUserId");

        public CalendarEventQueryBuilder WithInterviewId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("interviewId", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptInterviewId() => ExceptField("interviewId");

        public CalendarEventQueryBuilder WithInterviewKey(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("interviewKey", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptInterviewKey() => ExceptField("interviewKey");

        public CalendarEventQueryBuilder WithIsCompleted(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("isCompleted", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptIsCompleted() => ExceptField("isCompleted");

        public CalendarEventQueryBuilder WithPublicKey(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("publicKey", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptPublicKey() => ExceptField("publicKey");

        public CalendarEventQueryBuilder WithStartTimezone(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("startTimezone", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptStartTimezone() => ExceptField("startTimezone");

        public CalendarEventQueryBuilder WithStartUtc(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("startUtc", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptStartUtc() => ExceptField("startUtc");

        public CalendarEventQueryBuilder WithUpdateDateUtc(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("updateDateUtc", alias, new GraphQlDirective?[] { skip, include, stream });

        public CalendarEventQueryBuilder ExceptUpdateDateUtc() => ExceptField("updateDateUtc");
    }

    public partial class MapQueryBuilder : GraphQlQueryBuilder<MapQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "fileName" },
            new FieldMetadata { Name = "size" },
            new FieldMetadata { Name = "importDate" },
            new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserMapQueryBuilder) },
            new FieldMetadata { Name = "xMaxVal" },
            new FieldMetadata { Name = "yMaxVal" },
            new FieldMetadata { Name = "xMinVal" },
            new FieldMetadata { Name = "yMinVal" },
            new FieldMetadata { Name = "wkid" },
            new FieldMetadata { Name = "maxScale" },
            new FieldMetadata { Name = "minScale" }
        };

        protected override string TypeName { get; } = "Map";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public MapQueryBuilder WithFileName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("fileName", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptFileName() => ExceptField("fileName");

        public MapQueryBuilder WithSize(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("size", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptSize() => ExceptField("size");

        public MapQueryBuilder WithImportDate(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("importDate", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptImportDate() => ExceptField("importDate");

        public MapQueryBuilder WithUsers(UserMapQueryBuilder userMapQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("users", alias, userMapQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptUsers() => ExceptField("users");

        public MapQueryBuilder WithXMaxVal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("xMaxVal", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptXMaxVal() => ExceptField("xMaxVal");

        public MapQueryBuilder WithYMaxVal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("yMaxVal", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptYMaxVal() => ExceptField("yMaxVal");

        public MapQueryBuilder WithXMinVal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("xMinVal", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptXMinVal() => ExceptField("xMinVal");

        public MapQueryBuilder WithYMinVal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("yMinVal", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptYMinVal() => ExceptField("yMinVal");

        public MapQueryBuilder WithWkid(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("wkid", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptWkid() => ExceptField("wkid");

        public MapQueryBuilder WithMaxScale(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("maxScale", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptMaxScale() => ExceptField("maxScale");

        public MapQueryBuilder WithMinScale(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("minScale", alias, new GraphQlDirective?[] { skip, include, stream });

        public MapQueryBuilder ExceptMinScale() => ExceptField("minScale");
    }

    public partial class AssignmentQueryBuilder : GraphQlQueryBuilder<AssignmentQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "archived" },
            new FieldMetadata { Name = "createdAtUtc" },
            new FieldMetadata { Name = "email" },
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "interviewsNeeded" },
            new FieldMetadata { Name = "receivedByTabletAtUtc" },
            new FieldMetadata { Name = "responsibleId" },
            new FieldMetadata { Name = "webMode" }
        };

        protected override string TypeName { get; } = "Assignment";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public AssignmentQueryBuilder WithArchived(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("archived", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptArchived() => ExceptField("archived");

        public AssignmentQueryBuilder WithCreatedAtUtc(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("createdAtUtc", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptCreatedAtUtc() => ExceptField("createdAtUtc");

        public AssignmentQueryBuilder WithEmail(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("email", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptEmail() => ExceptField("email");

        public AssignmentQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptId() => ExceptField("id");

        public AssignmentQueryBuilder WithInterviewsNeeded(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("interviewsNeeded", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptInterviewsNeeded() => ExceptField("interviewsNeeded");

        public AssignmentQueryBuilder WithReceivedByTabletAtUtc(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("receivedByTabletAtUtc", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptReceivedByTabletAtUtc() => ExceptField("receivedByTabletAtUtc");

        public AssignmentQueryBuilder WithResponsibleId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("responsibleId", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptResponsibleId() => ExceptField("responsibleId");

        public AssignmentQueryBuilder WithWebMode(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("webMode", alias, new GraphQlDirective?[] { skip, include, stream });

        public AssignmentQueryBuilder ExceptWebMode() => ExceptField("webMode");
    }

    public partial class InterviewQueryBuilder : GraphQlQueryBuilder<InterviewQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "actionFlags", IsComplex = true },
            new FieldMetadata { Name = "assignmentId" },
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "responsibleName" },
            new FieldMetadata { Name = "responsibleId" },
            new FieldMetadata { Name = "responsibleRole" },
            new FieldMetadata { Name = "supervisorName" },
            new FieldMetadata { Name = "wasCompleted" },
            new FieldMetadata { Name = "createdDate" },
            new FieldMetadata { Name = "key" },
            new FieldMetadata { Name = "clientKey" },
            new FieldMetadata { Name = "updateDateUtc" },
            new FieldMetadata { Name = "receivedByInterviewerAtUtc" },
            new FieldMetadata { Name = "errorsCount" },
            new FieldMetadata { Name = "questionnaireId" },
            new FieldMetadata { Name = "questionnaireVariable" },
            new FieldMetadata { Name = "questionnaireVersion" },
            new FieldMetadata { Name = "identifyingData", IsComplex = true, QueryBuilderType = typeof(IdentifyingEntityQueryBuilder) },
            new FieldMetadata { Name = "notAnsweredCount" },
            new FieldMetadata { Name = "calendarEvent", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) }
        };

        protected override string TypeName { get; } = "Interview";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public InterviewQueryBuilder WithActionFlags(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("actionFlags", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptActionFlags() => ExceptField("actionFlags");

        public InterviewQueryBuilder WithAssignmentId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("assignmentId", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptAssignmentId() => ExceptField("assignmentId");

        public InterviewQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptId() => ExceptField("id");

        public InterviewQueryBuilder WithStatus(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("status", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptStatus() => ExceptField("status");

        public InterviewQueryBuilder WithResponsibleName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("responsibleName", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptResponsibleName() => ExceptField("responsibleName");

        public InterviewQueryBuilder WithResponsibleId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("responsibleId", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptResponsibleId() => ExceptField("responsibleId");

        public InterviewQueryBuilder WithResponsibleRole(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("responsibleRole", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptResponsibleRole() => ExceptField("responsibleRole");

        public InterviewQueryBuilder WithSupervisorName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("supervisorName", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptSupervisorName() => ExceptField("supervisorName");

        public InterviewQueryBuilder WithWasCompleted(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("wasCompleted", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptWasCompleted() => ExceptField("wasCompleted");

        public InterviewQueryBuilder WithCreatedDate(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("createdDate", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptCreatedDate() => ExceptField("createdDate");

        public InterviewQueryBuilder WithKey(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("key", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptKey() => ExceptField("key");

        public InterviewQueryBuilder WithClientKey(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("clientKey", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptClientKey() => ExceptField("clientKey");

        public InterviewQueryBuilder WithUpdateDateUtc(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("updateDateUtc", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptUpdateDateUtc() => ExceptField("updateDateUtc");

        public InterviewQueryBuilder WithReceivedByInterviewerAtUtc(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("receivedByInterviewerAtUtc", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptReceivedByInterviewerAtUtc() => ExceptField("receivedByInterviewerAtUtc");

        public InterviewQueryBuilder WithErrorsCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("errorsCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptErrorsCount() => ExceptField("errorsCount");

        public InterviewQueryBuilder WithQuestionnaireId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("questionnaireId", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptQuestionnaireId() => ExceptField("questionnaireId");

        public InterviewQueryBuilder WithQuestionnaireVariable(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("questionnaireVariable", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptQuestionnaireVariable() => ExceptField("questionnaireVariable");

        public InterviewQueryBuilder WithQuestionnaireVersion(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("questionnaireVersion", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptQuestionnaireVersion() => ExceptField("questionnaireVersion");

        public InterviewQueryBuilder WithIdentifyingData(IdentifyingEntityQueryBuilder identifyingEntityQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("identifyingData", alias, identifyingEntityQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptIdentifyingData() => ExceptField("identifyingData");

        public InterviewQueryBuilder WithNotAnsweredCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("notAnsweredCount", alias, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptNotAnsweredCount() => ExceptField("notAnsweredCount");

        public InterviewQueryBuilder WithCalendarEvent(CalendarEventQueryBuilder calendarEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("calendarEvent", alias, calendarEventQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public InterviewQueryBuilder ExceptCalendarEvent() => ExceptField("calendarEvent");
    }

    public partial class QuestionnaireQueryBuilder : GraphQlQueryBuilder<QuestionnaireQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "variable" },
            new FieldMetadata { Name = "questionnaireId" },
            new FieldMetadata { Name = "version" },
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "defaultLanguageName" },
            new FieldMetadata { Name = "translations", IsComplex = true, QueryBuilderType = typeof(TranslationQueryBuilder) }
        };

        protected override string TypeName { get; } = "Questionnaire";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public QuestionnaireQueryBuilder WithVariable(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("variable", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptVariable() => ExceptField("variable");

        public QuestionnaireQueryBuilder WithQuestionnaireId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("questionnaireId", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptQuestionnaireId() => ExceptField("questionnaireId");

        public QuestionnaireQueryBuilder WithVersion(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("version", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptVersion() => ExceptField("version");

        public QuestionnaireQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptId() => ExceptField("id");

        public QuestionnaireQueryBuilder WithTitle(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("title", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptTitle() => ExceptField("title");

        public QuestionnaireQueryBuilder WithDefaultLanguageName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("defaultLanguageName", alias, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptDefaultLanguageName() => ExceptField("defaultLanguageName");

        public QuestionnaireQueryBuilder WithTranslations(TranslationQueryBuilder translationQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("translations", alias, translationQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public QuestionnaireQueryBuilder ExceptTranslations() => ExceptField("translations");
    }

    public partial class CategoricalOptionQueryBuilder : GraphQlQueryBuilder<CategoricalOptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "parentValue" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "value" }
        };

        protected override string TypeName { get; } = "CategoricalOption";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public CategoricalOptionQueryBuilder WithParentValue(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("parentValue", alias, new GraphQlDirective?[] { skip, include, stream });

        public CategoricalOptionQueryBuilder ExceptParentValue() => ExceptField("parentValue");

        public CategoricalOptionQueryBuilder WithTitle(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("title", alias, new GraphQlDirective?[] { skip, include, stream });

        public CategoricalOptionQueryBuilder ExceptTitle() => ExceptField("title");

        public CategoricalOptionQueryBuilder WithValue(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("value", alias, new GraphQlDirective?[] { skip, include, stream });

        public CategoricalOptionQueryBuilder ExceptValue() => ExceptField("value");
    }

    public partial class UserMapQueryBuilder : GraphQlQueryBuilder<UserMapQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "userName" }
        };

        protected override string TypeName { get; } = "UserMap";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public UserMapQueryBuilder WithUserName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("userName", alias, new GraphQlDirective?[] { skip, include, stream });

        public UserMapQueryBuilder ExceptUserName() => ExceptField("userName");
    }

    public partial class IdentifyingEntityQueryBuilder : GraphQlQueryBuilder<IdentifyingEntityQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "answerValue" },
            new FieldMetadata { Name = "entity", IsComplex = true, QueryBuilderType = typeof(EntityQueryBuilder) },
            new FieldMetadata { Name = "value" }
        };

        protected override string TypeName { get; } = "IdentifyingEntity";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IdentifyingEntityQueryBuilder WithAnswerValue(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("answerValue", alias, new GraphQlDirective?[] { skip, include, stream });

        public IdentifyingEntityQueryBuilder ExceptAnswerValue() => ExceptField("answerValue");

        public IdentifyingEntityQueryBuilder WithEntity(EntityQueryBuilder entityQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithObjectField("entity", alias, entityQueryBuilder, new GraphQlDirective?[] { skip, include, stream });

        public IdentifyingEntityQueryBuilder ExceptEntity() => ExceptField("entity");

        public IdentifyingEntityQueryBuilder WithValue(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("value", alias, new GraphQlDirective?[] { skip, include, stream });

        public IdentifyingEntityQueryBuilder ExceptValue() => ExceptField("value");
    }

    public partial class TranslationQueryBuilder : GraphQlQueryBuilder<TranslationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "name" }
        };

        protected override string TypeName { get; } = "Translation";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public TranslationQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include, stream });

        public TranslationQueryBuilder ExceptId() => ExceptField("id");

        public TranslationQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null, StreamDirective? stream = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include, stream });

        public TranslationQueryBuilder ExceptName() => ExceptField("name");
    }
    #endregion

    #region input classes
    public partial class StringOperationFilterInputType : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _ncontains;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _nstartsWith;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<StringOperationFilterInputType>?>))]
        #endif
        public QueryBuilderParameter<ICollection<StringOperationFilterInputType>?>? And
        {
            get => (QueryBuilderParameter<ICollection<StringOperationFilterInputType>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<StringOperationFilterInputType>?>))]
        #endif
        public QueryBuilderParameter<ICollection<StringOperationFilterInputType>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<StringOperationFilterInputType>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Eq
        {
            get => (QueryBuilderParameter<string?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Neq
        {
            get => (QueryBuilderParameter<string?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Contains
        {
            get => (QueryBuilderParameter<string?>?)_contains.Value;
            set => _contains = new InputPropertyInfo { Name = "contains", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Ncontains
        {
            get => (QueryBuilderParameter<string?>?)_ncontains.Value;
            set => _ncontains = new InputPropertyInfo { Name = "ncontains", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<string?>?>? In
        {
            get => (QueryBuilderParameter<ICollection<string?>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<string?>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<string?>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? StartsWith
        {
            get => (QueryBuilderParameter<string?>?)_startsWith.Value;
            set => _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? NstartsWith
        {
            get => (QueryBuilderParameter<string?>?)_nstartsWith.Value;
            set => _nstartsWith = new InputPropertyInfo { Name = "nstartsWith", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_contains.Name != null) yield return _contains;
            if (_ncontains.Name != null) yield return _ncontains;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_nstartsWith.Name != null) yield return _nstartsWith;
        }
    }

    public partial class IdentifyEntityValueFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _answerCode;
        private InputPropertyInfo _value;
        private InputPropertyInfo _valueLowerCase;
        private InputPropertyInfo _entity;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<IdentifyEntityValueFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<IdentifyEntityValueFilter>?>? And
        {
            get => (QueryBuilderParameter<ICollection<IdentifyEntityValueFilter>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<IdentifyEntityValueFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<IdentifyEntityValueFilter>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<IdentifyEntityValueFilter>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableNullableOfDecimalOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableNullableOfDecimalOperationFilterInput?>? AnswerCode
        {
            get => (QueryBuilderParameter<ComparableNullableOfDecimalOperationFilterInput?>?)_answerCode.Value;
            set => _answerCode = new InputPropertyInfo { Name = "answerCode", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? Value
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_value.Value;
            set => _value = new InputPropertyInfo { Name = "value", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? ValueLowerCase
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_valueLowerCase.Value;
            set => _valueLowerCase = new InputPropertyInfo { Name = "valueLowerCase", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<QuestionnaireItemsFilter?>))]
        #endif
        public QueryBuilderParameter<QuestionnaireItemsFilter?>? Entity
        {
            get => (QueryBuilderParameter<QuestionnaireItemsFilter?>?)_entity.Value;
            set => _entity = new InputPropertyInfo { Name = "entity", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_answerCode.Name != null) yield return _answerCode;
            if (_value.Name != null) yield return _value;
            if (_valueLowerCase.Name != null) yield return _valueLowerCase;
            if (_entity.Name != null) yield return _entity;
        }
    }

    public partial class QuestionnaireItemsFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _title;
        private InputPropertyInfo _variable;
        private InputPropertyInfo _scope;
        private InputPropertyInfo _identifying;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionnaireItemsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionnaireItemsFilter>?>? And
        {
            get => (QueryBuilderParameter<ICollection<QuestionnaireItemsFilter>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionnaireItemsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionnaireItemsFilter>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<QuestionnaireItemsFilter>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? Title
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_title.Value;
            set => _title = new InputPropertyInfo { Name = "title", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? Variable
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_variable.Value;
            set => _variable = new InputPropertyInfo { Name = "variable", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<NullableOfQuestionScopeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<NullableOfQuestionScopeOperationFilterInput?>? Scope
        {
            get => (QueryBuilderParameter<NullableOfQuestionScopeOperationFilterInput?>?)_scope.Value;
            set => _scope = new InputPropertyInfo { Name = "scope", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<BooleanOperationFilterInput?>? Identifying
        {
            get => (QueryBuilderParameter<BooleanOperationFilterInput?>?)_identifying.Value;
            set => _identifying = new InputPropertyInfo { Name = "identifying", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_title.Name != null) yield return _title;
            if (_variable.Name != null) yield return _variable;
            if (_scope.Name != null) yield return _scope;
            if (_identifying.Name != null) yield return _identifying;
        }
    }

    public partial class ComparableNullableOfDecimalOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Eq
        {
            get => (QueryBuilderParameter<object?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Neq
        {
            get => (QueryBuilderParameter<object?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<object?>?>? In
        {
            get => (QueryBuilderParameter<ICollection<object?>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<object?>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<object?>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Gt
        {
            get => (QueryBuilderParameter<object?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Ngt
        {
            get => (QueryBuilderParameter<object?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Gte
        {
            get => (QueryBuilderParameter<object?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Ngte
        {
            get => (QueryBuilderParameter<object?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Lt
        {
            get => (QueryBuilderParameter<object?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Nlt
        {
            get => (QueryBuilderParameter<object?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Lte
        {
            get => (QueryBuilderParameter<object?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? Nlte
        {
            get => (QueryBuilderParameter<object?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class StringOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _ncontains;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _nstartsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _nendsWith;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<StringOperationFilterInput>?>))]
        #endif
        public QueryBuilderParameter<ICollection<StringOperationFilterInput>?>? And
        {
            get => (QueryBuilderParameter<ICollection<StringOperationFilterInput>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<StringOperationFilterInput>?>))]
        #endif
        public QueryBuilderParameter<ICollection<StringOperationFilterInput>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<StringOperationFilterInput>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Eq
        {
            get => (QueryBuilderParameter<string?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Neq
        {
            get => (QueryBuilderParameter<string?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Contains
        {
            get => (QueryBuilderParameter<string?>?)_contains.Value;
            set => _contains = new InputPropertyInfo { Name = "contains", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Ncontains
        {
            get => (QueryBuilderParameter<string?>?)_ncontains.Value;
            set => _ncontains = new InputPropertyInfo { Name = "ncontains", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<string?>?>? In
        {
            get => (QueryBuilderParameter<ICollection<string?>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<string?>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<string?>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? StartsWith
        {
            get => (QueryBuilderParameter<string?>?)_startsWith.Value;
            set => _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? NstartsWith
        {
            get => (QueryBuilderParameter<string?>?)_nstartsWith.Value;
            set => _nstartsWith = new InputPropertyInfo { Name = "nstartsWith", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? EndsWith
        {
            get => (QueryBuilderParameter<string?>?)_endsWith.Value;
            set => _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? NendsWith
        {
            get => (QueryBuilderParameter<string?>?)_nendsWith.Value;
            set => _nendsWith = new InputPropertyInfo { Name = "nendsWith", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_contains.Name != null) yield return _contains;
            if (_ncontains.Name != null) yield return _ncontains;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_nstartsWith.Name != null) yield return _nstartsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_nendsWith.Name != null) yield return _nendsWith;
        }
    }

    public partial class NullableOfQuestionScopeOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<QuestionScope?>))]
        #endif
        public QueryBuilderParameter<QuestionScope?>? Eq
        {
            get => (QueryBuilderParameter<QuestionScope?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<QuestionScope?>))]
        #endif
        public QueryBuilderParameter<QuestionScope?>? Neq
        {
            get => (QueryBuilderParameter<QuestionScope?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionScope?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionScope?>?>? In
        {
            get => (QueryBuilderParameter<ICollection<QuestionScope?>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionScope?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionScope?>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<QuestionScope?>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
        }
    }

    public partial class BooleanOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?>? Eq
        {
            get => (QueryBuilderParameter<bool?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?>? Neq
        {
            get => (QueryBuilderParameter<bool?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
        }
    }

    public partial class AssignmentsFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _id;
        private InputPropertyInfo _questionnaireId;
        private InputPropertyInfo _archived;
        private InputPropertyInfo _responsibleId;
        private InputPropertyInfo _webMode;
        private InputPropertyInfo _receivedByTabletAtUtc;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AssignmentsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<AssignmentsFilter>?>? And
        {
            get => (QueryBuilderParameter<ICollection<AssignmentsFilter>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AssignmentsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<AssignmentsFilter>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<AssignmentsFilter>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableInt32OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableInt32OperationFilterInput?>? Id
        {
            get => (QueryBuilderParameter<ComparableInt32OperationFilterInput?>?)_id.Value;
            set => _id = new InputPropertyInfo { Name = "id", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<QuestionnaireIdentity?>))]
        #endif
        public QueryBuilderParameter<QuestionnaireIdentity?>? QuestionnaireId
        {
            get => (QueryBuilderParameter<QuestionnaireIdentity?>?)_questionnaireId.Value;
            set => _questionnaireId = new InputPropertyInfo { Name = "questionnaireId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<BooleanOperationFilterInput?>? Archived
        {
            get => (QueryBuilderParameter<BooleanOperationFilterInput?>?)_archived.Value;
            set => _archived = new InputPropertyInfo { Name = "archived", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableGuidOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableGuidOperationFilterInput?>? ResponsibleId
        {
            get => (QueryBuilderParameter<ComparableGuidOperationFilterInput?>?)_responsibleId.Value;
            set => _responsibleId = new InputPropertyInfo { Name = "responsibleId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<BooleanOperationFilterInput?>? WebMode
        {
            get => (QueryBuilderParameter<BooleanOperationFilterInput?>?)_webMode.Value;
            set => _webMode = new InputPropertyInfo { Name = "webMode", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableNullableOfDateTimeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableNullableOfDateTimeOperationFilterInput?>? ReceivedByTabletAtUtc
        {
            get => (QueryBuilderParameter<ComparableNullableOfDateTimeOperationFilterInput?>?)_receivedByTabletAtUtc.Value;
            set => _receivedByTabletAtUtc = new InputPropertyInfo { Name = "receivedByTabletAtUtc", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_id.Name != null) yield return _id;
            if (_questionnaireId.Name != null) yield return _questionnaireId;
            if (_archived.Name != null) yield return _archived;
            if (_responsibleId.Name != null) yield return _responsibleId;
            if (_webMode.Name != null) yield return _webMode;
            if (_receivedByTabletAtUtc.Name != null) yield return _receivedByTabletAtUtc;
        }
    }

    public partial class InterviewsFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _status;
        private InputPropertyInfo _questionnaireId;
        private InputPropertyInfo _questionnaireVariable;
        private InputPropertyInfo _questionnaireVersion;
        private InputPropertyInfo _key;
        private InputPropertyInfo _notAnsweredCount;
        private InputPropertyInfo _clientKey;
        private InputPropertyInfo _assignmentId;
        private InputPropertyInfo _createdDate;
        private InputPropertyInfo _responsibleName;
        private InputPropertyInfo _responsibleNameLowerCase;
        private InputPropertyInfo _supervisorName;
        private InputPropertyInfo _supervisorNameLowerCase;
        private InputPropertyInfo _responsibleRole;
        private InputPropertyInfo _updateDateUtc;
        private InputPropertyInfo _receivedByInterviewerAtUtc;
        private InputPropertyInfo _errorsCount;
        private InputPropertyInfo _identifyingData;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InterviewsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<InterviewsFilter>?>? And
        {
            get => (QueryBuilderParameter<ICollection<InterviewsFilter>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InterviewsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<InterviewsFilter>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<InterviewsFilter>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InterviewStatusOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<InterviewStatusOperationFilterInput?>? Status
        {
            get => (QueryBuilderParameter<InterviewStatusOperationFilterInput?>?)_status.Value;
            set => _status = new InputPropertyInfo { Name = "status", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableGuidOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableGuidOperationFilterInput?>? QuestionnaireId
        {
            get => (QueryBuilderParameter<ComparableGuidOperationFilterInput?>?)_questionnaireId.Value;
            set => _questionnaireId = new InputPropertyInfo { Name = "questionnaireId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? QuestionnaireVariable
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_questionnaireVariable.Value;
            set => _questionnaireVariable = new InputPropertyInfo { Name = "questionnaireVariable", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableInt64OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableInt64OperationFilterInput?>? QuestionnaireVersion
        {
            get => (QueryBuilderParameter<ComparableInt64OperationFilterInput?>?)_questionnaireVersion.Value;
            set => _questionnaireVersion = new InputPropertyInfo { Name = "questionnaireVersion", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? Key
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_key.Value;
            set => _key = new InputPropertyInfo { Name = "key", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableNullableOfInt32OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableNullableOfInt32OperationFilterInput?>? NotAnsweredCount
        {
            get => (QueryBuilderParameter<ComparableNullableOfInt32OperationFilterInput?>?)_notAnsweredCount.Value;
            set => _notAnsweredCount = new InputPropertyInfo { Name = "notAnsweredCount", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? ClientKey
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_clientKey.Value;
            set => _clientKey = new InputPropertyInfo { Name = "clientKey", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableNullableOfInt32OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableNullableOfInt32OperationFilterInput?>? AssignmentId
        {
            get => (QueryBuilderParameter<ComparableNullableOfInt32OperationFilterInput?>?)_assignmentId.Value;
            set => _assignmentId = new InputPropertyInfo { Name = "assignmentId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableDateTimeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableDateTimeOperationFilterInput?>? CreatedDate
        {
            get => (QueryBuilderParameter<ComparableDateTimeOperationFilterInput?>?)_createdDate.Value;
            set => _createdDate = new InputPropertyInfo { Name = "createdDate", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? ResponsibleName
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_responsibleName.Value;
            set => _responsibleName = new InputPropertyInfo { Name = "responsibleName", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? ResponsibleNameLowerCase
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_responsibleNameLowerCase.Value;
            set => _responsibleNameLowerCase = new InputPropertyInfo { Name = "responsibleNameLowerCase", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? SupervisorName
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_supervisorName.Value;
            set => _supervisorName = new InputPropertyInfo { Name = "supervisorName", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? SupervisorNameLowerCase
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_supervisorNameLowerCase.Value;
            set => _supervisorNameLowerCase = new InputPropertyInfo { Name = "supervisorNameLowerCase", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserRolesOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<UserRolesOperationFilterInput?>? ResponsibleRole
        {
            get => (QueryBuilderParameter<UserRolesOperationFilterInput?>?)_responsibleRole.Value;
            set => _responsibleRole = new InputPropertyInfo { Name = "responsibleRole", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableDateTimeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableDateTimeOperationFilterInput?>? UpdateDateUtc
        {
            get => (QueryBuilderParameter<ComparableDateTimeOperationFilterInput?>?)_updateDateUtc.Value;
            set => _updateDateUtc = new InputPropertyInfo { Name = "updateDateUtc", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableNullableOfDateTimeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableNullableOfDateTimeOperationFilterInput?>? ReceivedByInterviewerAtUtc
        {
            get => (QueryBuilderParameter<ComparableNullableOfDateTimeOperationFilterInput?>?)_receivedByInterviewerAtUtc.Value;
            set => _receivedByInterviewerAtUtc = new InputPropertyInfo { Name = "receivedByInterviewerAtUtc", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableInt32OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableInt32OperationFilterInput?>? ErrorsCount
        {
            get => (QueryBuilderParameter<ComparableInt32OperationFilterInput?>?)_errorsCount.Value;
            set => _errorsCount = new InputPropertyInfo { Name = "errorsCount", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ListFilterInputTypeOfIdentifyEntityValueFilterInput?>))]
        #endif
        public QueryBuilderParameter<ListFilterInputTypeOfIdentifyEntityValueFilterInput?>? IdentifyingData
        {
            get => (QueryBuilderParameter<ListFilterInputTypeOfIdentifyEntityValueFilterInput?>?)_identifyingData.Value;
            set => _identifyingData = new InputPropertyInfo { Name = "identifyingData", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_status.Name != null) yield return _status;
            if (_questionnaireId.Name != null) yield return _questionnaireId;
            if (_questionnaireVariable.Name != null) yield return _questionnaireVariable;
            if (_questionnaireVersion.Name != null) yield return _questionnaireVersion;
            if (_key.Name != null) yield return _key;
            if (_notAnsweredCount.Name != null) yield return _notAnsweredCount;
            if (_clientKey.Name != null) yield return _clientKey;
            if (_assignmentId.Name != null) yield return _assignmentId;
            if (_createdDate.Name != null) yield return _createdDate;
            if (_responsibleName.Name != null) yield return _responsibleName;
            if (_responsibleNameLowerCase.Name != null) yield return _responsibleNameLowerCase;
            if (_supervisorName.Name != null) yield return _supervisorName;
            if (_supervisorNameLowerCase.Name != null) yield return _supervisorNameLowerCase;
            if (_responsibleRole.Name != null) yield return _responsibleRole;
            if (_updateDateUtc.Name != null) yield return _updateDateUtc;
            if (_receivedByInterviewerAtUtc.Name != null) yield return _receivedByInterviewerAtUtc;
            if (_errorsCount.Name != null) yield return _errorsCount;
            if (_identifyingData.Name != null) yield return _identifyingData;
        }
    }

    public partial class InterviewSort : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _createdDate;
        private InputPropertyInfo _updateDateUtc;
        private InputPropertyInfo _responsibleName;
        private InputPropertyInfo _responsibleRole;
        private InputPropertyInfo _assignmentId;
        private InputPropertyInfo _errorsCount;
        private InputPropertyInfo _status;
        private InputPropertyInfo _receivedByInterviewerAtUtc;
        private InputPropertyInfo _questionnaireId;
        private InputPropertyInfo _questionnaireVersion;
        private InputPropertyInfo _id;
        private InputPropertyInfo _notAnsweredCount;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? Key
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_key.Value;
            set => _key = new InputPropertyInfo { Name = "key", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? CreatedDate
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_createdDate.Value;
            set => _createdDate = new InputPropertyInfo { Name = "createdDate", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? UpdateDateUtc
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_updateDateUtc.Value;
            set => _updateDateUtc = new InputPropertyInfo { Name = "updateDateUtc", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? ResponsibleName
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_responsibleName.Value;
            set => _responsibleName = new InputPropertyInfo { Name = "responsibleName", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? ResponsibleRole
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_responsibleRole.Value;
            set => _responsibleRole = new InputPropertyInfo { Name = "responsibleRole", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? AssignmentId
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_assignmentId.Value;
            set => _assignmentId = new InputPropertyInfo { Name = "assignmentId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? ErrorsCount
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_errorsCount.Value;
            set => _errorsCount = new InputPropertyInfo { Name = "errorsCount", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? Status
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_status.Value;
            set => _status = new InputPropertyInfo { Name = "status", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? ReceivedByInterviewerAtUtc
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_receivedByInterviewerAtUtc.Value;
            set => _receivedByInterviewerAtUtc = new InputPropertyInfo { Name = "receivedByInterviewerAtUtc", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? QuestionnaireId
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_questionnaireId.Value;
            set => _questionnaireId = new InputPropertyInfo { Name = "questionnaireId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? QuestionnaireVersion
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_questionnaireVersion.Value;
            set => _questionnaireVersion = new InputPropertyInfo { Name = "questionnaireVersion", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? Id
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_id.Value;
            set => _id = new InputPropertyInfo { Name = "id", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? NotAnsweredCount
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_notAnsweredCount.Value;
            set => _notAnsweredCount = new InputPropertyInfo { Name = "notAnsweredCount", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_createdDate.Name != null) yield return _createdDate;
            if (_updateDateUtc.Name != null) yield return _updateDateUtc;
            if (_responsibleName.Name != null) yield return _responsibleName;
            if (_responsibleRole.Name != null) yield return _responsibleRole;
            if (_assignmentId.Name != null) yield return _assignmentId;
            if (_errorsCount.Name != null) yield return _errorsCount;
            if (_status.Name != null) yield return _status;
            if (_receivedByInterviewerAtUtc.Name != null) yield return _receivedByInterviewerAtUtc;
            if (_questionnaireId.Name != null) yield return _questionnaireId;
            if (_questionnaireVersion.Name != null) yield return _questionnaireVersion;
            if (_id.Name != null) yield return _id;
            if (_notAnsweredCount.Name != null) yield return _notAnsweredCount;
        }
    }

    public partial class MapsFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _fileName;
        private InputPropertyInfo _importDateUtc;
        private InputPropertyInfo _size;
        private InputPropertyInfo _users;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MapsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<MapsFilter>?>? And
        {
            get => (QueryBuilderParameter<ICollection<MapsFilter>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MapsFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<MapsFilter>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<MapsFilter>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? FileName
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_fileName.Value;
            set => _fileName = new InputPropertyInfo { Name = "fileName", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableNullableOfDateTimeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableNullableOfDateTimeOperationFilterInput?>? ImportDateUtc
        {
            get => (QueryBuilderParameter<ComparableNullableOfDateTimeOperationFilterInput?>?)_importDateUtc.Value;
            set => _importDateUtc = new InputPropertyInfo { Name = "importDateUtc", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableInt64OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableInt64OperationFilterInput?>? Size
        {
            get => (QueryBuilderParameter<ComparableInt64OperationFilterInput?>?)_size.Value;
            set => _size = new InputPropertyInfo { Name = "size", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ListFilterInputTypeOfUserMapFilterInput?>))]
        #endif
        public QueryBuilderParameter<ListFilterInputTypeOfUserMapFilterInput?>? Users
        {
            get => (QueryBuilderParameter<ListFilterInputTypeOfUserMapFilterInput?>?)_users.Value;
            set => _users = new InputPropertyInfo { Name = "users", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_fileName.Name != null) yield return _fileName;
            if (_importDateUtc.Name != null) yield return _importDateUtc;
            if (_size.Name != null) yield return _size;
            if (_users.Name != null) yield return _users;
        }
    }

    public partial class MapsSort : IGraphQlInputObject
    {
        private InputPropertyInfo _fileName;
        private InputPropertyInfo _importDateUtc;
        private InputPropertyInfo _size;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? FileName
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_fileName.Value;
            set => _fileName = new InputPropertyInfo { Name = "fileName", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? ImportDateUtc
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_importDateUtc.Value;
            set => _importDateUtc = new InputPropertyInfo { Name = "importDateUtc", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortEnumType?>))]
        #endif
        public QueryBuilderParameter<SortEnumType?>? Size
        {
            get => (QueryBuilderParameter<SortEnumType?>?)_size.Value;
            set => _size = new InputPropertyInfo { Name = "size", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_fileName.Name != null) yield return _fileName;
            if (_importDateUtc.Name != null) yield return _importDateUtc;
            if (_size.Name != null) yield return _size;
        }
    }

    public partial class QuestionFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _variable;
        private InputPropertyInfo _scope;
        private InputPropertyInfo _identifying;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionFilter>?>? And
        {
            get => (QueryBuilderParameter<ICollection<QuestionFilter>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionFilter>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionFilter>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<QuestionFilter>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? Variable
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_variable.Value;
            set => _variable = new InputPropertyInfo { Name = "variable", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<NullableOfQuestionScopeOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<NullableOfQuestionScopeOperationFilterInput?>? Scope
        {
            get => (QueryBuilderParameter<NullableOfQuestionScopeOperationFilterInput?>?)_scope.Value;
            set => _scope = new InputPropertyInfo { Name = "scope", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<BooleanOperationFilterInput?>? Identifying
        {
            get => (QueryBuilderParameter<BooleanOperationFilterInput?>?)_identifying.Value;
            set => _identifying = new InputPropertyInfo { Name = "identifying", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_variable.Name != null) yield return _variable;
            if (_scope.Name != null) yield return _scope;
            if (_identifying.Name != null) yield return _identifying;
        }
    }

    public partial class ComparableInt32OperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Eq
        {
            get => (QueryBuilderParameter<int?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Neq
        {
            get => (QueryBuilderParameter<int?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>?>))]
        #endif
        public QueryBuilderParameter<ICollection<int>?>? In
        {
            get => (QueryBuilderParameter<ICollection<int>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>?>))]
        #endif
        public QueryBuilderParameter<ICollection<int>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<int>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Gt
        {
            get => (QueryBuilderParameter<int?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Ngt
        {
            get => (QueryBuilderParameter<int?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Gte
        {
            get => (QueryBuilderParameter<int?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Ngte
        {
            get => (QueryBuilderParameter<int?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Lt
        {
            get => (QueryBuilderParameter<int?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Nlt
        {
            get => (QueryBuilderParameter<int?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Lte
        {
            get => (QueryBuilderParameter<int?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Nlte
        {
            get => (QueryBuilderParameter<int?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class QuestionnaireIdentity : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _id;
        private InputPropertyInfo _version;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionnaireIdentity>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionnaireIdentity>?>? And
        {
            get => (QueryBuilderParameter<ICollection<QuestionnaireIdentity>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<QuestionnaireIdentity>?>))]
        #endif
        public QueryBuilderParameter<ICollection<QuestionnaireIdentity>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<QuestionnaireIdentity>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableGuidOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableGuidOperationFilterInput?>? Id
        {
            get => (QueryBuilderParameter<ComparableGuidOperationFilterInput?>?)_id.Value;
            set => _id = new InputPropertyInfo { Name = "id", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableInt64OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableInt64OperationFilterInput?>? Version
        {
            get => (QueryBuilderParameter<ComparableInt64OperationFilterInput?>?)_version.Value;
            set => _version = new InputPropertyInfo { Name = "version", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_id.Name != null) yield return _id;
            if (_version.Name != null) yield return _version;
        }
    }

    public partial class ComparableGuidOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Eq
        {
            get => (QueryBuilderParameter<Guid?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Neq
        {
            get => (QueryBuilderParameter<Guid?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<Guid>?>))]
        #endif
        public QueryBuilderParameter<ICollection<Guid>?>? In
        {
            get => (QueryBuilderParameter<ICollection<Guid>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<Guid>?>))]
        #endif
        public QueryBuilderParameter<ICollection<Guid>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<Guid>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Gt
        {
            get => (QueryBuilderParameter<Guid?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Ngt
        {
            get => (QueryBuilderParameter<Guid?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Gte
        {
            get => (QueryBuilderParameter<Guid?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Ngte
        {
            get => (QueryBuilderParameter<Guid?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Lt
        {
            get => (QueryBuilderParameter<Guid?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Nlt
        {
            get => (QueryBuilderParameter<Guid?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Lte
        {
            get => (QueryBuilderParameter<Guid?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value, FormatMask = "N" };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?>? Nlte
        {
            get => (QueryBuilderParameter<Guid?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value, FormatMask = "N" };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class ComparableNullableOfDateTimeOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Eq
        {
            get => (QueryBuilderParameter<DateTime?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Neq
        {
            get => (QueryBuilderParameter<DateTime?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>?>? In
        {
            get => (QueryBuilderParameter<ICollection<DateTime?>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<DateTime?>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Gt
        {
            get => (QueryBuilderParameter<DateTime?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Ngt
        {
            get => (QueryBuilderParameter<DateTime?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Gte
        {
            get => (QueryBuilderParameter<DateTime?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Ngte
        {
            get => (QueryBuilderParameter<DateTime?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Lt
        {
            get => (QueryBuilderParameter<DateTime?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Nlt
        {
            get => (QueryBuilderParameter<DateTime?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Lte
        {
            get => (QueryBuilderParameter<DateTime?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Nlte
        {
            get => (QueryBuilderParameter<DateTime?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class InterviewStatusOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InterviewStatus?>))]
        #endif
        public QueryBuilderParameter<InterviewStatus?>? Eq
        {
            get => (QueryBuilderParameter<InterviewStatus?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InterviewStatus?>))]
        #endif
        public QueryBuilderParameter<InterviewStatus?>? Neq
        {
            get => (QueryBuilderParameter<InterviewStatus?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InterviewStatus>?>))]
        #endif
        public QueryBuilderParameter<ICollection<InterviewStatus>?>? In
        {
            get => (QueryBuilderParameter<ICollection<InterviewStatus>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InterviewStatus>?>))]
        #endif
        public QueryBuilderParameter<ICollection<InterviewStatus>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<InterviewStatus>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
        }
    }

    public partial class ComparableInt64OperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Eq
        {
            get => (QueryBuilderParameter<long?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Neq
        {
            get => (QueryBuilderParameter<long?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>?>))]
        #endif
        public QueryBuilderParameter<ICollection<long>?>? In
        {
            get => (QueryBuilderParameter<ICollection<long>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>?>))]
        #endif
        public QueryBuilderParameter<ICollection<long>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<long>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Gt
        {
            get => (QueryBuilderParameter<long?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Ngt
        {
            get => (QueryBuilderParameter<long?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Gte
        {
            get => (QueryBuilderParameter<long?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Ngte
        {
            get => (QueryBuilderParameter<long?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Lt
        {
            get => (QueryBuilderParameter<long?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Nlt
        {
            get => (QueryBuilderParameter<long?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Lte
        {
            get => (QueryBuilderParameter<long?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?>? Nlte
        {
            get => (QueryBuilderParameter<long?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class ComparableNullableOfInt32OperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Eq
        {
            get => (QueryBuilderParameter<int?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Neq
        {
            get => (QueryBuilderParameter<int?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>?>? In
        {
            get => (QueryBuilderParameter<ICollection<int?>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<int?>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Gt
        {
            get => (QueryBuilderParameter<int?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Ngt
        {
            get => (QueryBuilderParameter<int?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Gte
        {
            get => (QueryBuilderParameter<int?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Ngte
        {
            get => (QueryBuilderParameter<int?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Lt
        {
            get => (QueryBuilderParameter<int?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Nlt
        {
            get => (QueryBuilderParameter<int?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Lte
        {
            get => (QueryBuilderParameter<int?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Nlte
        {
            get => (QueryBuilderParameter<int?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class ComparableDateTimeOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _ngt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _ngte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _nlt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _nlte;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Eq
        {
            get => (QueryBuilderParameter<DateTime?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Neq
        {
            get => (QueryBuilderParameter<DateTime?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime>?>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime>?>? In
        {
            get => (QueryBuilderParameter<ICollection<DateTime>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime>?>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<DateTime>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Gt
        {
            get => (QueryBuilderParameter<DateTime?>?)_gt.Value;
            set => _gt = new InputPropertyInfo { Name = "gt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Ngt
        {
            get => (QueryBuilderParameter<DateTime?>?)_ngt.Value;
            set => _ngt = new InputPropertyInfo { Name = "ngt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Gte
        {
            get => (QueryBuilderParameter<DateTime?>?)_gte.Value;
            set => _gte = new InputPropertyInfo { Name = "gte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Ngte
        {
            get => (QueryBuilderParameter<DateTime?>?)_ngte.Value;
            set => _ngte = new InputPropertyInfo { Name = "ngte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Lt
        {
            get => (QueryBuilderParameter<DateTime?>?)_lt.Value;
            set => _lt = new InputPropertyInfo { Name = "lt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Nlt
        {
            get => (QueryBuilderParameter<DateTime?>?)_nlt.Value;
            set => _nlt = new InputPropertyInfo { Name = "nlt", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Lte
        {
            get => (QueryBuilderParameter<DateTime?>?)_lte.Value;
            set => _lte = new InputPropertyInfo { Name = "lte", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?>? Nlte
        {
            get => (QueryBuilderParameter<DateTime?>?)_nlte.Value;
            set => _nlte = new InputPropertyInfo { Name = "nlte", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
            if (_gt.Name != null) yield return _gt;
            if (_ngt.Name != null) yield return _ngt;
            if (_gte.Name != null) yield return _gte;
            if (_ngte.Name != null) yield return _ngte;
            if (_lt.Name != null) yield return _lt;
            if (_nlt.Name != null) yield return _nlt;
            if (_lte.Name != null) yield return _lte;
            if (_nlte.Name != null) yield return _nlte;
        }
    }

    public partial class UserRolesOperationFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _neq;
        private InputPropertyInfo _in;
        private InputPropertyInfo _nin;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserRoles?>))]
        #endif
        public QueryBuilderParameter<UserRoles?>? Eq
        {
            get => (QueryBuilderParameter<UserRoles?>?)_eq.Value;
            set => _eq = new InputPropertyInfo { Name = "eq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserRoles?>))]
        #endif
        public QueryBuilderParameter<UserRoles?>? Neq
        {
            get => (QueryBuilderParameter<UserRoles?>?)_neq.Value;
            set => _neq = new InputPropertyInfo { Name = "neq", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UserRoles>?>))]
        #endif
        public QueryBuilderParameter<ICollection<UserRoles>?>? In
        {
            get => (QueryBuilderParameter<ICollection<UserRoles>?>?)_in.Value;
            set => _in = new InputPropertyInfo { Name = "in", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UserRoles>?>))]
        #endif
        public QueryBuilderParameter<ICollection<UserRoles>?>? Nin
        {
            get => (QueryBuilderParameter<ICollection<UserRoles>?>?)_nin.Value;
            set => _nin = new InputPropertyInfo { Name = "nin", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_neq.Name != null) yield return _neq;
            if (_in.Name != null) yield return _in;
            if (_nin.Name != null) yield return _nin;
        }
    }

    public partial class ListFilterInputTypeOfIdentifyEntityValueFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _all;
        private InputPropertyInfo _none;
        private InputPropertyInfo _some;
        private InputPropertyInfo _any;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdentifyEntityValueFilter?>))]
        #endif
        public QueryBuilderParameter<IdentifyEntityValueFilter?>? All
        {
            get => (QueryBuilderParameter<IdentifyEntityValueFilter?>?)_all.Value;
            set => _all = new InputPropertyInfo { Name = "all", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdentifyEntityValueFilter?>))]
        #endif
        public QueryBuilderParameter<IdentifyEntityValueFilter?>? None
        {
            get => (QueryBuilderParameter<IdentifyEntityValueFilter?>?)_none.Value;
            set => _none = new InputPropertyInfo { Name = "none", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdentifyEntityValueFilter?>))]
        #endif
        public QueryBuilderParameter<IdentifyEntityValueFilter?>? Some
        {
            get => (QueryBuilderParameter<IdentifyEntityValueFilter?>?)_some.Value;
            set => _some = new InputPropertyInfo { Name = "some", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?>? Any
        {
            get => (QueryBuilderParameter<bool?>?)_any.Value;
            set => _any = new InputPropertyInfo { Name = "any", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_all.Name != null) yield return _all;
            if (_none.Name != null) yield return _none;
            if (_some.Name != null) yield return _some;
            if (_any.Name != null) yield return _any;
        }
    }

    public partial class ListFilterInputTypeOfUserMapFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _all;
        private InputPropertyInfo _none;
        private InputPropertyInfo _some;
        private InputPropertyInfo _any;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserMapFilterInput?>))]
        #endif
        public QueryBuilderParameter<UserMapFilterInput?>? All
        {
            get => (QueryBuilderParameter<UserMapFilterInput?>?)_all.Value;
            set => _all = new InputPropertyInfo { Name = "all", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserMapFilterInput?>))]
        #endif
        public QueryBuilderParameter<UserMapFilterInput?>? None
        {
            get => (QueryBuilderParameter<UserMapFilterInput?>?)_none.Value;
            set => _none = new InputPropertyInfo { Name = "none", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserMapFilterInput?>))]
        #endif
        public QueryBuilderParameter<UserMapFilterInput?>? Some
        {
            get => (QueryBuilderParameter<UserMapFilterInput?>?)_some.Value;
            set => _some = new InputPropertyInfo { Name = "some", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?>? Any
        {
            get => (QueryBuilderParameter<bool?>?)_any.Value;
            set => _any = new InputPropertyInfo { Name = "any", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_all.Name != null) yield return _all;
            if (_none.Name != null) yield return _none;
            if (_some.Name != null) yield return _some;
            if (_any.Name != null) yield return _any;
        }
    }

    public partial class UserMapFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _id;
        private InputPropertyInfo _userName;
        private InputPropertyInfo _map;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UserMapFilterInput>?>))]
        #endif
        public QueryBuilderParameter<ICollection<UserMapFilterInput>?>? And
        {
            get => (QueryBuilderParameter<ICollection<UserMapFilterInput>?>?)_and.Value;
            set => _and = new InputPropertyInfo { Name = "and", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UserMapFilterInput>?>))]
        #endif
        public QueryBuilderParameter<ICollection<UserMapFilterInput>?>? Or
        {
            get => (QueryBuilderParameter<ICollection<UserMapFilterInput>?>?)_or.Value;
            set => _or = new InputPropertyInfo { Name = "or", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComparableInt32OperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<ComparableInt32OperationFilterInput?>? Id
        {
            get => (QueryBuilderParameter<ComparableInt32OperationFilterInput?>?)_id.Value;
            set => _id = new InputPropertyInfo { Name = "id", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringOperationFilterInput?>))]
        #endif
        public QueryBuilderParameter<StringOperationFilterInput?>? UserName
        {
            get => (QueryBuilderParameter<StringOperationFilterInput?>?)_userName.Value;
            set => _userName = new InputPropertyInfo { Name = "userName", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MapsFilter?>))]
        #endif
        public QueryBuilderParameter<MapsFilter?>? Map
        {
            get => (QueryBuilderParameter<MapsFilter?>?)_map.Value;
            set => _map = new InputPropertyInfo { Name = "map", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_id.Name != null) yield return _id;
            if (_userName.Name != null) yield return _userName;
            if (_map.Name != null) yield return _map;
        }
    }
    #endregion

    #region data classes
    public partial class HeadquartersQuery
    {
        public IPagedConnectionOfAssignment? Assignments { get; set; }
        public IPagedConnectionOfInterview? Interviews { get; set; }
        public IPagedConnectionOfMap? Maps { get; set; }
        public IPagedConnectionOfQuestionnaire? Questionnaires { get; set; }
        public ICollection<Entity?>? Questions { get; set; }
        public ICollection<QuestionnaireItem?>? QuestionnaireItems { get; set; }
        public User? Viewer { get; set; }
    }

    public partial class HeadquartersMutation
    {
        public CalendarEvent? AddOrUpdateCalendarEvent { get; set; }
        public CalendarEvent? DeleteCalendarEvent { get; set; }
        public Map? DeleteMap { get; set; }
        public Map? DeleteUserFromMap { get; set; }
        public Map? AddUserToMap { get; set; }
    }

    public partial class IPagedConnectionOfAssignment
    {
        public ICollection<Assignment?>? Nodes { get; set; }
        public int? TotalCount { get; set; }
        public int? FilteredCount { get; set; }
    }

    public partial class IPagedConnectionOfInterview
    {
        public ICollection<Interview?>? Nodes { get; set; }
        public int? TotalCount { get; set; }
        public int? FilteredCount { get; set; }
    }

    public partial class IPagedConnectionOfMap
    {
        public ICollection<Map?>? Nodes { get; set; }
        public int? TotalCount { get; set; }
        public int? FilteredCount { get; set; }
    }

    public partial class IPagedConnectionOfQuestionnaire
    {
        public ICollection<Questionnaire?>? Nodes { get; set; }
        public int? TotalCount { get; set; }
        public int? FilteredCount { get; set; }
    }

    public partial class Entity
    {
        public bool? Identifying { get; set; }
        public string? Label { get; set; }
        public ICollection<CategoricalOption>? Options { get; set; }
        public string? QuestionText { get; set; }
        public QuestionScope? Scope { get; set; }
        public QuestionType? Type { get; set; }
        public string? Variable { get; set; }
    }

    public partial class QuestionnaireItem
    {
        public EntityType? EntityType { get; set; }
        public string? Title { get; set; }
        public string? Variable { get; set; }
        public QuestionScope? Scope { get; set; }
        public string? Label { get; set; }
        public QuestionType? Type { get; set; }
        public bool? Identifying { get; set; }
        public ICollection<CategoricalOption>? Options { get; set; }
    }

    public partial class User
    {
        public string? Id { get; set; }
        public ICollection<UserRoles>? Roles { get; set; }
        public string? UserName { get; set; }
        public ICollection<string>? Workspaces { get; set; }
    }

    public partial class CalendarEvent
    {
        public int? AssignmentId { get; set; }
        public string? Comment { get; set; }
        public Guid? CreatorUserId { get; set; }
        public Guid? InterviewId { get; set; }
        public string? InterviewKey { get; set; }
        public bool? IsCompleted { get; set; }
        public Guid? PublicKey { get; set; }
        public string? StartTimezone { get; set; }
        public DateTime? StartUtc { get; set; }
        public DateTime? UpdateDateUtc { get; set; }
    }

    public partial class Map
    {
        public string? FileName { get; set; }
        public long? Size { get; set; }
        public DateTime? ImportDate { get; set; }
        public ICollection<UserMap?>? Users { get; set; }
        public double? XMaxVal { get; set; }
        public double? YMaxVal { get; set; }
        public double? XMinVal { get; set; }
        public double? YMinVal { get; set; }
        public int? Wkid { get; set; }
        public double? MaxScale { get; set; }
        public double? MinScale { get; set; }
    }

    public partial class Assignment
    {
        public bool? Archived { get; set; }
        public DateTime? CreatedAtUtc { get; set; }
        public string? Email { get; set; }
        public string? Id { get; set; }
        public int? InterviewsNeeded { get; set; }
        public DateTime? ReceivedByTabletAtUtc { get; set; }
        public Guid? ResponsibleId { get; set; }
        public bool? WebMode { get; set; }
    }

    public partial class Interview
    {
        public ICollection<InterviewActionFlags>? ActionFlags { get; set; }
        public int? AssignmentId { get; set; }
        public string? Id { get; set; }
        public InterviewStatus? Status { get; set; }
        public string? ResponsibleName { get; set; }
        public Guid? ResponsibleId { get; set; }
        public UserRoles? ResponsibleRole { get; set; }
        public string? SupervisorName { get; set; }
        public bool? WasCompleted { get; set; }
        public DateTime? CreatedDate { get; set; }
        public string? Key { get; set; }
        public string? ClientKey { get; set; }
        public DateTime? UpdateDateUtc { get; set; }
        public DateTime? ReceivedByInterviewerAtUtc { get; set; }
        public int? ErrorsCount { get; set; }
        public Guid? QuestionnaireId { get; set; }
        public string? QuestionnaireVariable { get; set; }
        public long? QuestionnaireVersion { get; set; }
        public ICollection<IdentifyingEntity?>? IdentifyingData { get; set; }
        public int? NotAnsweredCount { get; set; }
        public CalendarEvent? CalendarEvent { get; set; }
    }

    public partial class Questionnaire
    {
        public string? Variable { get; set; }
        public Guid? QuestionnaireId { get; set; }
        public long? Version { get; set; }
        public string? Id { get; set; }
        public string? Title { get; set; }
        public string? DefaultLanguageName { get; set; }
        public ICollection<Translation>? Translations { get; set; }
    }

    public partial class CategoricalOption
    {
        public int? ParentValue { get; set; }
        public string? Title { get; set; }
        public int? Value { get; set; }
    }

    public partial class UserMap
    {
        public string? UserName { get; set; }
    }

    public partial class IdentifyingEntity
    {
        public int? AnswerValue { get; set; }
        public Entity? Entity { get; set; }
        public string? Value { get; set; }
    }

    public partial class Translation
    {
        public Guid? Id { get; set; }
        public string? Name { get; set; }
    }
    #endregion
#nullable restore
}
